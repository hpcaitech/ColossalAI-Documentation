"use strict";(self.webpackChunkagile_docs=self.webpackChunkagile_docs||[]).push([[8127],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4034:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],l={},s="\u5982\u4f55\u5728\u8bad\u7ec3\u4e2d\u4f7f\u7528 Engine \u548c Trainer",p={unversionedId:"basics/engine_trainer",id:"version-v0.2.2/basics/engine_trainer",title:"\u5982\u4f55\u5728\u8bad\u7ec3\u4e2d\u4f7f\u7528 Engine \u548c Trainer",description:"\u4f5c\u8005: Shenggui Li, Siqi Mai",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-v0.2.2/basics/engine_trainer.md",sourceDirName:"basics",slug:"/basics/engine_trainer",permalink:"/zh-Hans/docs/basics/engine_trainer",tags:[],version:"v0.2.2",frontMatter:{}},c=[{value:"\u7b80\u4ecb",id:"\u7b80\u4ecb",children:[{value:"Engine",id:"engine",children:[],level:3},{value:"Trainer",id:"trainer",children:[],level:3}],level:2},{value:"ResNet",id:"resnet",children:[{value:"\u603b\u89c8",id:"\u603b\u89c8",children:[],level:3},{value:"\u725b\u5200\u5c0f\u8bd5",id:"\u725b\u5200\u5c0f\u8bd5",children:[{value:"\u6b65\u9aa4 1. \u521b\u5efa\u914d\u7f6e\u6587\u4ef6",id:"\u6b65\u9aa4-1-\u521b\u5efa\u914d\u7f6e\u6587\u4ef6",children:[],level:4},{value:"\u6b65\u9aa4 2. \u521d\u59cb\u5316\u5206\u5e03\u5f0f\u73af\u5883",id:"\u6b65\u9aa4-2-\u521d\u59cb\u5316\u5206\u5e03\u5f0f\u73af\u5883",children:[],level:4},{value:"\u6b65\u9aa4 3. \u521b\u5efa\u6240\u6709\u7684\u8bad\u7ec3\u7ec4\u4ef6",id:"\u6b65\u9aa4-3-\u521b\u5efa\u6240\u6709\u7684\u8bad\u7ec3\u7ec4\u4ef6",children:[],level:4},{value:"\u6b65\u9aa4 4. \u7528 Colossal-AI \u8fdb\u884c\u521d\u59cb\u5316",id:"\u6b65\u9aa4-4-\u7528-colossal-ai-\u8fdb\u884c\u521d\u59cb\u5316",children:[],level:4},{value:"\u6b65\u9aa4 5. \u7528 Engine \u8fdb\u884c\u8bad\u7ec3",id:"\u6b65\u9aa4-5-\u7528-engine-\u8fdb\u884c\u8bad\u7ec3",children:[],level:4},{value:"\u6b65\u9aa4 6. \u7528 Trainer \u8fdb\u884c\u8bad\u7ec3",id:"\u6b65\u9aa4-6-\u7528-trainer-\u8fdb\u884c\u8bad\u7ec3",children:[],level:4},{value:"\u6b65\u9aa4 7. \u5f00\u59cb\u5206\u5e03\u5f0f\u8bad\u7ec3",id:"\u6b65\u9aa4-7-\u5f00\u59cb\u5206\u5e03\u5f0f\u8bad\u7ec3",children:[],level:4}],level:3}],level:2}],d={toc:c};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u5982\u4f55\u5728\u8bad\u7ec3\u4e2d\u4f7f\u7528-engine-\u548c-trainer"},"\u5982\u4f55\u5728\u8bad\u7ec3\u4e2d\u4f7f\u7528 Engine \u548c Trainer"),(0,o.kt)("p",null,"\u4f5c\u8005: Shenggui Li, Siqi Mai"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u9884\u5907\u77e5\u8bc6:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/zh-Hans/docs/basics/initialize_features"},"\u521d\u59cb\u5316\u529f\u80fd"))),(0,o.kt)("h2",{id:"\u7b80\u4ecb"},"\u7b80\u4ecb"),(0,o.kt)("p",null,"\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 Colossal-AI \u4e2d\u63d0\u4f9b\u7684 Engine \u548c Trainer \u6765\u8bad\u7ec3\u60a8\u7684\u6a21\u578b\u3002\u5728\u6df1\u5165\u7814\u7a76\u7ec6\u8282\u4e4b\u524d\uff0c\u6211\u4eec\u60f3\u5148\u89e3\u91ca\u4e00\u4e0b Engine \u548c Trainer \u7684\u6982\u5ff5\u3002"),(0,o.kt)("h3",{id:"engine"},"Engine"),(0,o.kt)("p",null,"Engine \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6a21\u578b\u3001\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570\u7684\u5c01\u88c5\u7c7b\u3002\u5f53\u6211\u4eec\u8c03\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"colossalai.initialize")," \u65f6\uff0c\u4e00\u4e2a Engine \u5bf9\u8c61\u5c06\u88ab\u8fd4\u56de\uff0c\u5e76\u4e14\u914d\u5907\u4e86\u5728\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u68af\u5ea6\u526a\u88c1\u3001\u68af\u5ea6\u7d2f\u8ba1\u548c ZeRO \u4f18\u5316\u5668\u7b49\u529f\u80fd\u3002"),(0,o.kt)("p",null,"Engine \u5c06\u4f7f\u7528\u4e0e PyTorch \u8bad\u7ec3\u7ec4\u4ef6\u7c7b\u4f3c\u7684 API\uff0c\u56e0\u6b64\u60a8\u53ea\u9700\u5bf9\u4ee3\u7801\u8fdb\u884c\u5fae\u5c0f\u7684\u4fee\u6539\u5373\u53ef\u3002"),(0,o.kt)("p",null,"\u4e0b\u8868\u5c55\u793a\u4e86Engine\u7684\u5e38\u7528API\u3002"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"\u7ec4\u4ef6"),(0,o.kt)("th",{parentName:"tr",align:null},"\u529f\u80fd"),(0,o.kt)("th",{parentName:"tr",align:null},"PyTorch"),(0,o.kt)("th",{parentName:"tr",align:null},"Colossal-AI"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"optimizer"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8fed\u4ee3\u524d\u5c06\u6240\u6709\u68af\u5ea6\u8bbe\u7f6e\u4e3a\u96f6"),(0,o.kt)("td",{parentName:"tr",align:null},"optimizer.zero_grad()"),(0,o.kt)("td",{parentName:"tr",align:null},"engine.zero_grad()")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"optimizer"),(0,o.kt)("td",{parentName:"tr",align:null},"\u66f4\u65b0\u53c2\u6570"),(0,o.kt)("td",{parentName:"tr",align:null},"optimizer.step()"),(0,o.kt)("td",{parentName:"tr",align:null},"engine.step()")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"model"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8fdb\u884c\u4e00\u6b21\u524d\u5411\u8ba1\u7b97"),(0,o.kt)("td",{parentName:"tr",align:null},"outputs = model(inputs)"),(0,o.kt)("td",{parentName:"tr",align:null},"outputs = engine(inputs)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"criterion"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8ba1\u7b97loss\u503c"),(0,o.kt)("td",{parentName:"tr",align:null},"loss = criterion(output, label)"),(0,o.kt)("td",{parentName:"tr",align:null},"loss = engine.criterion(output, label)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"criterion"),(0,o.kt)("td",{parentName:"tr",align:null},"\u53cd\u5411\u8ba1\u7b97"),(0,o.kt)("td",{parentName:"tr",align:null},"loss.backward()"),(0,o.kt)("td",{parentName:"tr",align:null},"engine.backward(loss)")))),(0,o.kt)("p",null,"\u6211\u4eec\u9700\u8981\u8fd9\u6837\u4e00\u4e2a Engine \u7c7b\u7684\u539f\u56e0\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\uff0c\u540c\u65f6\u5c06\u5b9e\u73b0\u9690\u85cf\u5728\n",(0,o.kt)("inlineCode",{parentName:"p"},"colossalai.initialize")," \u51fd\u6570\u4e2d\u5b9e\u73b0\u3002\n\u5047\u5982\u6211\u4eec\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"colossalai.initialize")," \u51fd\u6570\u4e2d\u5b8c\u6210\u5bf9\u4e8e\u6a21\u578b\u3001\u4f18\u5316\u5668\u3001\u6570\u636e\u52a0\u8f7d\u5668\u548c\u635f\u5931\u51fd\u6570\u7684\u529f\u80fd\u8be0\u91ca\u3002\u4e0d\u7ba1\u4e2d\u95f4\u7684\u8fc7\u7a0b\u6709\u591a\u590d\u6742\uff0c\u6700\u7ec8\u6211\u4eec\u5448\u73b0\u7684\u4ee5\u53ca\u7528\u6237\u9700\u8981\u4f7f\u7528\u7684\u53ea\u6709\u4e00\u4e2a Engine \u7c7b\uff0c\u8fd9\u5c06\u5341\u5206\u4fbf\u6377\u3002\n\u7528\u6237\u53ea\u9700\u8981\u5728\u6700\u5c0f\u8303\u56f4\u5185\u4fee\u6539\u4ed6\u4eec\u7684\u4ee3\u7801\uff0c\u5c06\u666e\u901a\u7684 PyTorch APIs \u8c03\u6574\u4e3a Colossal-AI\nEngine \u7684 API\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4eab\u53d7\u66f4\u591a\u7684\u529f\u80fd\u6765\u8fdb\u884c\u6709\u6548\u7684\u8bad\u7ec3\u3002"),(0,o.kt)("p",null,"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import colossalai\n\n# build your model, optimizer, criterion, dataloaders\n...\n\nengine, train_dataloader, test_dataloader, _ = colossalai.initialize(model,\n                                                                    optimizer,\n                                                                    criterion,\n                                                                    train_dataloader,\n                                                                    test_dataloader)\nfor img, label in train_dataloader:\n    engine.zero_grad()\n    output = engine(img)\n    loss = engine.criterion(output, label)\n    engine.backward(loss)\n    engine.step()\n")),(0,o.kt)("h3",{id:"trainer"},"Trainer"),(0,o.kt)("p",null,"Trainer \u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u5c01\u88c5\u5668\uff0c\u7528\u6237\u53ef\u4ee5\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u884c\u6765\u6267\u884c\u8bad\u7ec3\u3002 \u7531\u4e8e Trainer \u7684\u4f7f\u7528\u4f1a\u66f4\u52a0\u7b80\u5355\uff0c\u76f8\u8f83\u4e8e Engine\uff0c\u5b83\u4f1a\u7f3a\u5c11\u4e00\u70b9\u7075\u6d3b\u6027\u3002 Trainer \u88ab\u8bbe\u8ba1\u4e3a\u8fdb\u884c\u524d\u5411\u548c\u53cd\u5411\u8ba1\u7b97\u6765\u8fdb\u884c\u6a21\u578b\u6743\u91cd\u7684\u66f4\u65b0\u3002\u901a\u8fc7\u4f20\u9012 Engine \u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u521b\u5efa\u4e00\u4e2a Trainer\u3002\nTrainer \u7684\u53c2\u6570 ",(0,o.kt)("inlineCode",{parentName:"p"},"schedule")," \u9ed8\u8ba4\u503c\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," \u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u6211\u4eec\u60f3\u4f7f\u7528\u6d41\u6c34\u7ebf\u5e76\u884c\uff0c\u5426\u5219\u6211\u4eec\u628a\u8fd9\u4e2a\u503c\u8bbe\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"\u3002\u5982\u679c\u60a8\u60f3\u63a2\u7d22\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u53c2\u6570\u7684\u5185\u5bb9\uff0c\u60a8\u53ef\u4ee5\u524d\u5f80\u6d41\u6c34\u7ebf\u5e76\u884c\u7684\u76f8\u5173\u6559\u7a0b\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from colossalai.logging import get_dist_logger\nfrom colossalai.trainer import Trainer, hooks\n\n# build components and initialize with colossalai.initialize\n...\n\n# create a logger so that trainer can log on the console\nlogger = get_dist_logger()\n\n# create a trainer object\ntrainer = Trainer(\n    engine=engine,\n    logger=logger\n)\n")),(0,o.kt)("p",null,"\u5728 Trainer \u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u5b9a\u5236\u4e00\u4e9b hooks\uff0c\u5e76\u5c06\u8fd9\u4e9b hooks \u9644\u52a0\u5230 Trainer \u4e0a\u3002hook \u5c06\u6839\u636e\u8bad\u7ec3\u65b9\u6848\u5b9a\u671f\u5730\u6267\u884c\u751f\u547d\u5468\u671f\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u57fa\u4e8e\u7528\u6237\u662f\u60f3\u5728\u6bcf\u6b21\u8bad\u7ec3\u8fed\u4ee3\u540e\u8fd8\u662f\u53ea\u5728\u6574\u4e2a\u8bad\u7ec3\u5468\u671f\u540e\u66f4\u65b0\u5b66\u4e60\u7387\uff0c\n",(0,o.kt)("inlineCode",{parentName:"p"},"LRSchedulerHook")," \u5c06\u4f1a\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"after_train_iter")," \u6216 ",(0,o.kt)("inlineCode",{parentName:"p"},"after_train_epoch")," \u9636\u6bb5\u6267\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"lr_scheduler.step()")," \u53bb\u4e3a\u7528\u6237\u66f4\u65b0\u5b66\u4e60\u7387\u3002\u60a8\u53ef\u4ee5\u5c06 hook \u5b58\u50a8\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 ",(0,o.kt)("inlineCode",{parentName:"p"},"trainer.fit")," \u65b9\u6cd5\u3002",(0,o.kt)("inlineCode",{parentName:"p"},"trainer.fit")," \u65b9\u6cd5\u5c06\u6839\u636e\u60a8\u7684\u53c2\u6570\u6267\u884c\u8bad\u7ec3\u548c\u6d4b\u8bd5\u3002\u5982\u679c ",(0,o.kt)("inlineCode",{parentName:"p"},"display_process")," \u4e3a True\uff0c\u5c06\u5728\u60a8\u7684\u63a7\u5236\u53f0\u663e\u793a\u4e00\u4e2a\u8fdb\u5ea6\u6761\uff0c\u4ee5\u663e\u793a\u8bad\u7ec3\u7684\u8fc7\u7a0b\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# define the hooks to attach to the trainer\nhook_list = [\n    hooks.LossHook(),\n    hooks.LRSchedulerHook(lr_scheduler=lr_scheduler, by_epoch=True),\n    hooks.AccuracyHook(accuracy_func=Accuracy()),\n    hooks.LogMetricByEpochHook(logger),\n]\n\n# start training\ntrainer.fit(\n    train_dataloader=train_dataloader,\n    epochs=NUM_EPOCHS,\n    test_dataloader=test_dataloader,\n    test_interval=1,\n    hooks=hook_list,\n    display_progress=True\n)\n")),(0,o.kt)("p",null,"\u5982\u679c\u60a8\u60f3\u5b9a\u5236\u60a8\u7684 hook \u7c7b\uff0c\u60a8\u53ef\u4ee5\u7ee7\u627f ",(0,o.kt)("inlineCode",{parentName:"p"},"hooks.BaseHook")," \u5e76\u91cd\u5199\u60a8\u60f3\u8981\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\u3002\u4e0b\u9762\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u4e8e\u65e5\u5fd7\u4fe1\u606f\u7684 hook\uff0c\u4ee5\u4f9b\u60a8\u53c2\u8003\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from colossalai.logging import get_dist_logger\nfrom colossalai.trainer import hooks\n\nclass LogMessageHook(hooks.BaseHook):\n\n    def __init__(self, priority=10):\n        self._logger = get_dist_logger()\n\n    def before_train(self, trainer):\n        self._logger.info('training starts')\n\n    def after_train(self, trainer):\n        self._logger.info('training finished')\n\n\n...\n\n# then in your training script\nhook_list.append(LogMessageHook())\n")),(0,o.kt)("p",null,"\u5728\u4e0b\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u60a8\u5c06\u4f1a\u8be6\u7ec6\u5730\u4e86\u89e3\u5230\u5982\u4f55\u7528 Engine \u548c Trainer \u6765\u8bad\u7ec3 ResNet \u6a21\u578b\u3002"),(0,o.kt)("h2",{id:"resnet"},"ResNet"),(0,o.kt)("h3",{id:"\u603b\u89c8"},"\u603b\u89c8"),(0,o.kt)("p",null,"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u4f7f\u7528\u4e00\u4e2a Engine \u5728 CIFAR10 \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3 ResNet34 \u6a21\u578b"),(0,o.kt)("li",{parentName:"ol"},"\u4f7f\u7528\u4e00\u4e2a Trainer \u5728 CIFAR10 \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3 ResNet34 \u6a21\u578b")),(0,o.kt)("p",null,"\u9879\u76ee\u7ed3\u6784\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"-- config.py\n-- run_resnet_cifar10_with_engine.py\n-- run_resnet_cifar10_with_trainer.py\n")),(0,o.kt)("p",null,"\u5bf9\u4e8e\u4f7f\u7528 Engine \u6216 Trainer\uff0c\u6b65\u9aa4 1-4 \u662f\u901a\u7528\u7684\u3002 \u56e0\u6b64\uff0c\u6b65\u9aa4 1-4 + \u6b65\u9aa4 5 \u5c06\u4f1a\u662f\u5bf9\u5e94 ",(0,o.kt)("inlineCode",{parentName:"p"},"run_resnet_cifar10_with_engine.py")," \u800c \u6b65\u9aa4 1-4 + \u6b65\u9aa46 \u5219\u5bf9\u5e94 ",(0,o.kt)("inlineCode",{parentName:"p"},"run_resnet_cifar10_with_trainer.py"),"\u3002"),(0,o.kt)("h3",{id:"\u725b\u5200\u5c0f\u8bd5"},"\u725b\u5200\u5c0f\u8bd5"),(0,o.kt)("h4",{id:"\u6b65\u9aa4-1-\u521b\u5efa\u914d\u7f6e\u6587\u4ef6"},"\u6b65\u9aa4 1. \u521b\u5efa\u914d\u7f6e\u6587\u4ef6"),(0,o.kt)("p",null,"\u5728\u4f60\u7684\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"config.py"),"\u3002\u8fd9\u4e2a\u6587\u4ef6\u662f\u7528\u6765\u6307\u5b9a\u4e00\u4e9b\u60a8\u53ef\u80fd\u60f3\u7528\u6765\u8bad\u7ec3\u60a8\u7684\u6a21\u578b\u7684\u7279\u5f81\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u4f8b\u5b50\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from colossalai.amp import AMP_TYPE\n\nBATCH_SIZE = 128\nNUM_EPOCHS = 200\n\nfp16=dict(\n    mode=AMP_TYPE.TORCH\n)\n")),(0,o.kt)("p",null,"\u5728\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u8981\u5728\u6bcf\u4e2a GPU \u4e0a\u4f7f\u7528\u6279\u5927\u5c0f\u4e3a128\uff0c\u5e76\u8fd0\u884c200\u4e2a epoch\u3002\u8fd9\u4e24\u4e2a\u53c2\u6570\u662f\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"gpc.config")," \u4e2d\u4f53\u73b0\u7684\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"gpc.config.BATCH_SIZE")," \u6765\u8bbf\u95ee\u60a8\u5b58\u50a8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u6279\u5927\u5c0f\u503c\u3002\u800c ",(0,o.kt)("inlineCode",{parentName:"p"},"fp16")," \u914d\u7f6e\u5219\u4f1a\u544a\u8bc9 ",(0,o.kt)("inlineCode",{parentName:"p"},"colossalai.initialize")," \u4f7f\u7528 PyTorch \u63d0\u4f9b\u7684\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff0c\u4ee5\u66f4\u597d\u7684\u901f\u5ea6\u548c\u66f4\u4f4e\u7684\u5185\u5b58\u6d88\u8017\u6765\u8bad\u7ec3\u6a21\u578b\u3002"),(0,o.kt)("h4",{id:"\u6b65\u9aa4-2-\u521d\u59cb\u5316\u5206\u5e03\u5f0f\u73af\u5883"},"\u6b65\u9aa4 2. \u521d\u59cb\u5316\u5206\u5e03\u5f0f\u73af\u5883"),(0,o.kt)("p",null,"\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316\u5206\u5e03\u5f0f\u8bad\u7ec3\u73af\u5883\u3002\u8fd9\u5728 ",(0,o.kt)("a",{parentName:"p",href:"/zh-Hans/docs/basics/launch_colossalai"},"\u542f\u52a8 Colossal-AI")," \u4e2d\u6709\u76f8\u5e94\u7684\u6559\u7a0b\u3002\u5728\u5f53\u524d\u7684\u6f14\u793a\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"launch_from_torch")," \u548c PyTorch \u542f\u7528\u5de5\u5177\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import colossalai\n\n# ./config.py refers to the config file we just created in step 1\ncolossalai.launch_from_torch(config='./config.py')\n")),(0,o.kt)("h4",{id:"\u6b65\u9aa4-3-\u521b\u5efa\u6240\u6709\u7684\u8bad\u7ec3\u7ec4\u4ef6"},"\u6b65\u9aa4 3. \u521b\u5efa\u6240\u6709\u7684\u8bad\u7ec3\u7ec4\u4ef6"),(0,o.kt)("p",null,"\u8fd9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u7528\u4e8e\u8bad\u7ec3\u7684\u6240\u6709\u7ec4\u4ef6\uff0c\u5305\u62ec\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6a21\u578b"),(0,o.kt)("li",{parentName:"ol"},"\u4f18\u5316\u5668"),(0,o.kt)("li",{parentName:"ol"},"\u635f\u5931\u51fd\u6570"),(0,o.kt)("li",{parentName:"ol"},"\u8bad\u7ec3/\u6d4b\u8bd5\u6570\u636e\u52a0\u8f7d\u5668"),(0,o.kt)("li",{parentName:"ol"},"\u5b66\u4e60\u7387\u8c03\u5ea6\u5668"),(0,o.kt)("li",{parentName:"ol"},"\u65e5\u5fd7\u8bb0\u5f55\u5668")),(0,o.kt)("p",null,"\u4e3a\u4e86\u6784\u5efa\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u60a8\u9700\u8981\u5bfc\u5165\u4ee5\u4e0b\u6a21\u5757\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pathlib import Path\nfrom colossalai.logging import get_dist_logger\nimport torch\nimport os\nfrom colossalai.core import global_context as gpc\nfrom colossalai.utils import get_dataloader\nfrom torchvision import transforms\nfrom colossalai.nn.lr_scheduler import CosineAnnealingLR\nfrom torchvision.datasets import CIFAR10\nfrom torchvision.models import resnet34\n")),(0,o.kt)("p",null,"\u7136\u540e\u6309\u7167\u901a\u5e38\u5728PyTorch\u811a\u672c\u4e2d\u6784\u5efa\u7ec4\u4ef6\u7684\u65b9\u5f0f\u6765\u6784\u5efa\u7ec4\u4ef6\u3002\u5728\u4e0b\u9762\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5c06CIFAR10\u6570\u636e\u96c6\u7684\u6839\u8def\u5f84\u8bbe\u7f6e\u4e3a\u73af\u5883\u53d8\u91cf ",(0,o.kt)("inlineCode",{parentName:"p"},"DATA"),"\u3002\u60a8\u53ef\u4ee5\u628a\u5b83\u6539\u4e3a\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u8def\u5f84\uff0c\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u628a ",(0,o.kt)("inlineCode",{parentName:"p"},"root=Path(os.environ['DATA'])")," \u6539\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"root='./data'")," \uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# build logger\nlogger = get_dist_logger()\n\n# build resnet\nmodel = resnet34(num_classes=10)\n\n# build datasets\ntrain_dataset = CIFAR10(\n    root='./data',\n    download=True,\n    transform=transforms.Compose(\n        [\n            transforms.RandomCrop(size=32, padding=4),\n            transforms.RandomHorizontalFlip(),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[\n                0.2023, 0.1994, 0.2010]),\n        ]\n    )\n)\n\ntest_dataset = CIFAR10(\n    root='./data',\n    train=False,\n    transform=transforms.Compose(\n        [\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.4914, 0.4822, 0.4465], std=[\n                0.2023, 0.1994, 0.2010]),\n        ]\n    )\n)\n\n# build dataloaders\ntrain_dataloader = get_dataloader(dataset=train_dataset,\n                                  shuffle=True,\n                                  batch_size=gpc.config.BATCH_SIZE,\n                                  num_workers=1,\n                                  pin_memory=True,\n                                  )\n\ntest_dataloader = get_dataloader(dataset=test_dataset,\n                                 add_sampler=False,\n                                 batch_size=gpc.config.BATCH_SIZE,\n                                 num_workers=1,\n                                 pin_memory=True,\n                                 )\n\n# build criterion\ncriterion = torch.nn.CrossEntropyLoss()\n\n# optimizer\noptimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4)\n\n# lr_scheduler\nlr_scheduler = CosineAnnealingLR(optimizer, total_steps=gpc.config.NUM_EPOCHS)\n")),(0,o.kt)("h4",{id:"\u6b65\u9aa4-4-\u7528-colossal-ai-\u8fdb\u884c\u521d\u59cb\u5316"},"\u6b65\u9aa4 4. \u7528 Colossal-AI \u8fdb\u884c\u521d\u59cb\u5316"),(0,o.kt)("p",null,"\u63a5\u4e0b\u6765\uff0c\u91cd\u8981\u7684\u4e00\u6b65\u662f\u901a\u8fc7\u8c03\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"colossalai.initialize")," \u83b7\u5f97 Engine\u3002\u6b63\u5982 ",(0,o.kt)("inlineCode",{parentName:"p"},"config.py")," \u4e2d\u6240\u8ff0\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u6765\u8bad\u7ec3 ResNet34 \u6a21\u578b\u3002",(0,o.kt)("inlineCode",{parentName:"p"},"colossalai.initialize")," \u5c06\u81ea\u52a8\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u5c06\u76f8\u5173\u7279\u5f81\u5206\u914d\u7ed9\u60a8\u7684\u8bad\u7ec3\u7ec4\u4ef6\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u7684 Engine \u5df2\u7ecf\u80fd\u591f\u8fdb\u884c\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff0c\u800c\u60a8\u4e0d\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u5904\u7406\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"engine, train_dataloader, test_dataloader, _ = colossalai.initialize(model,\n                                                                     optimizer,\n                                                                     criterion,\n                                                                     train_dataloader,\n                                                                     test_dataloader,\n                                                                     )\n")),(0,o.kt)("h4",{id:"\u6b65\u9aa4-5-\u7528-engine-\u8fdb\u884c\u8bad\u7ec3"},"\u6b65\u9aa4 5. \u7528 Engine \u8fdb\u884c\u8bad\u7ec3"),(0,o.kt)("p",null,"\u5f53\u6240\u6709\u7684\u8bad\u7ec3\u7ec4\u4ef6\u90fd\u51c6\u5907\u597d\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u4f7f\u7528 PyTorch \u4e00\u6837\u8bad\u7ec3 ResNet34 \u4e86\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'for epoch in range(gpc.config.NUM_EPOCHS):\n    # execute a training iteration\n    engine.train()\n    for img, label in train_dataloader:\n        img = img.cuda()\n        label = label.cuda()\n\n        # set gradients to zero\n        engine.zero_grad()\n\n        # run forward pass\n        output = engine(img)\n\n        # compute loss value and run backward pass\n        train_loss = engine.criterion(output, label)\n        engine.backward(train_loss)\n\n        # update parameters\n        engine.step()\n\n    # update learning rate\n    lr_scheduler.step()\n\n    # execute a testing iteration\n    engine.eval()\n    correct = 0\n    total = 0\n    for img, label in test_dataloader:\n        img = img.cuda()\n        label = label.cuda()\n\n        # run prediction without back-propagation\n        with torch.no_grad():\n            output = engine(img)\n            test_loss = engine.criterion(output, label)\n\n        # compute the number of correct prediction\n        pred = torch.argmax(output, dim=-1)\n        correct += torch.sum(pred == label)\n        total += img.size(0)\n\n    logger.info(\n        f"Epoch {epoch} - train loss: {train_loss:.5}, test loss: {test_loss:.5}, acc: {correct / total:.5}, lr: {lr_scheduler.get_last_lr()[0]:.5g}", ranks=[0])\n')),(0,o.kt)("h4",{id:"\u6b65\u9aa4-6-\u7528-trainer-\u8fdb\u884c\u8bad\u7ec3"},"\u6b65\u9aa4 6. \u7528 Trainer \u8fdb\u884c\u8bad\u7ec3"),(0,o.kt)("p",null,"\u5982\u679c\u60a8\u60f3\u7528 Trainer \u8fdb\u884c\u8bad\u7ec3\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u60a8\u7684\u5b9e\u9a8c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from colossalai.nn.metric import Accuracy\nfrom colossalai.trainer import Trainer, hooks\n\n\n# create a trainer object\ntrainer = Trainer(\n    engine=engine,\n    logger=logger\n)\n\n# define the hooks to attach to the trainer\nhook_list = [\n    hooks.LossHook(),\n    hooks.LRSchedulerHook(lr_scheduler=lr_scheduler, by_epoch=True),\n    hooks.AccuracyHook(accuracy_func=Accuracy()),\n    hooks.LogMetricByEpochHook(logger),\n    hooks.LogMemoryByEpochHook(logger)\n]\n\n# start training\n# run testing every 1 epoch\ntrainer.fit(\n    train_dataloader=train_dataloader,\n    epochs=gpc.config.NUM_EPOCHS,\n    test_dataloader=test_dataloader,\n    test_interval=1,\n    hooks=hook_list,\n    display_progress=True\n)\n")),(0,o.kt)("h4",{id:"\u6b65\u9aa4-7-\u5f00\u59cb\u5206\u5e03\u5f0f\u8bad\u7ec3"},"\u6b65\u9aa4 7. \u5f00\u59cb\u5206\u5e03\u5f0f\u8bad\u7ec3"),(0,o.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 PyTorch \u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u542f\u52a8\u5668\u6765\u8c03\u7528\u811a\u672c\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u6b65\u9aa42\u4e2d\u4f7f\u7528\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"launch_from_torch"),"\u3002\u60a8\u9700\u8981\u628a",(0,o.kt)("inlineCode",{parentName:"p"},"<num_gpus>")," \u66ff\u6362\u6210\u60a8\u673a\u5668\u4e0a\u53ef\u7528\u7684GPU\u6570\u91cf\u3002\u5982\u679c\u60a8\u53ea\u60f3\u4f7f\u7528\u4e00\u4e2a GPU\uff0c\u60a8\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u5b57\u8bbe\u4e3a1\u3002\u5982\u679c\u60a8\u60f3\u4f7f\u7528\u5176\u4ed6\u7684\u542f\u52a8\u5668\uff0c\u8bf7\u60a8\u53c2\u8003\u5982\u4f55\u542f\u52a8 Colossal-AI \u7684\u6559\u7a0b\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# with engine\npython -m torch.distributed.launch --nproc_per_node <num_gpus> --master_addr localhost --master_port 29500 run_resnet_cifar10_with_engine.py\n# with trainer\npython -m torch.distributed.launch --nproc_per_node <num_gpus> --master_addr localhost --master_port 29500 run_resnet_cifar10_with_trainer.py\n")))}u.isMDXComponent=!0}}]);