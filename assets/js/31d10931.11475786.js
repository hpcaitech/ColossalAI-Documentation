"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[2584],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5589:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={},i="Model Checkpoint",l={unversionedId:"basics/model_checkpoint",id:"basics/model_checkpoint",title:"Model Checkpoint",description:"Author : Guangyang Lu",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/basics/model_checkpoint.md",sourceDirName:"basics",slug:"/basics/model_checkpoint",permalink:"/docs/basics/model_checkpoint",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/basics/model_checkpoint.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configure Parallelization",permalink:"/docs/basics/configure_parallelization"},next:{title:"ColoTensor Concepts",permalink:"/docs/basics/colotensor_concept"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Save",id:"save",level:3},{value:"Save when using engine",id:"save-when-using-engine",level:4},{value:"Save when using trainer",id:"save-when-using-trainer",level:4},{value:"Load",id:"load",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"model-checkpoint"},"Model Checkpoint"),(0,a.kt)("p",null,"Author : Guangyang Lu"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f The information on this page is outdated and will be deprecated. Please check ",(0,a.kt)("a",{parentName:"p",href:"/docs/basics/booster_checkpoint"},"Booster Checkpoint")," for more information.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Prerequisite:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/basics/launch_colossalai"},"Launch Colossal-AI")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/basics/initialize_features"},"Initialize Colossal-AI"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example Code:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/hpcaitech/ColossalAI-Examples/tree/main/utils/checkpoint"},"ColossalAI-Examples Model Checkpoint"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This function is experiential.")),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"In this tutorial, you will learn how to save and load model checkpoints."),(0,a.kt)("p",null,"To leverage the power of parallel strategies in Colossal-AI, modifications to models and tensors are needed, for which you cannot directly use ",(0,a.kt)("inlineCode",{parentName:"p"},"torch.save")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"torch.load"),"  to save or load model checkpoints. Therefore, we have provided you with the API to achieve the same thing."),(0,a.kt)("p",null,"Moreover, when loading, you are not demanded to use the same parallel strategy as saving."),(0,a.kt)("h2",{id:"how-to-use"},"How to use"),(0,a.kt)("h3",{id:"save"},"Save"),(0,a.kt)("p",null,"There are two ways to train a model in Colossal-AI, by engine or by trainer.\n",(0,a.kt)("strong",{parentName:"p"},"Be aware that we only save the ",(0,a.kt)("inlineCode",{parentName:"strong"},"state_dict"),".")," Therefore, when loading the checkpoints, you need to define the model first."),(0,a.kt)("h4",{id:"save-when-using-engine"},"Save when using engine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from colossalai.utils import save_checkpoint\nmodel = ...\nengine, _, _, _ = colossalai.initialize(model=model, ...)\nfor epoch in range(num_epochs):\n    ... # do some training\n    save_checkpoint('xxx.pt', epoch, model)\n")),(0,a.kt)("h4",{id:"save-when-using-trainer"},"Save when using trainer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from colossalai.trainer import Trainer, hooks\nmodel = ...\nengine, _, _, _ = colossalai.initialize(model=model, ...)\ntrainer = Trainer(engine, ...)\nhook_list = [\n            hooks.SaveCheckpointHook(1, 'xxx.pt', model)\n            ...]\n\ntrainer.fit(...\n            hook=hook_list)\n")),(0,a.kt)("h3",{id:"load"},"Load"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from colossalai.utils import load_checkpoint\nmodel = ...\nload_checkpoint('xxx.pt', model)\n... # train or test\n")))}d.isMDXComponent=!0}}]);