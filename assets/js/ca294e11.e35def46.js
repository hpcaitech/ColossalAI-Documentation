"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[2476],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=a.createContext({}),m=function(e){var t=a.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(o),u=n,h=p["".concat(l,".").concat(u)]||p[u]||d[u]||r;return o?a.createElement(h,i(i({ref:t},c),{},{components:o})):a.createElement(h,i({ref:t},c))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,i[1]=s;for(var m=2;m<r;m++)i[m]=o[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},283:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=o(7462),n=(o(7294),o(3905));const r={},i="Meet Gemini:The Heterogeneous Memory Manager of Colossal-AI",s={unversionedId:"advanced_tutorials/meet_gemini",id:"advanced_tutorials/meet_gemini",title:"Meet Gemini:The Heterogeneous Memory Manager of Colossal-AI",description:"Author: Jiarui Fang, Yang You",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/advanced_tutorials/meet_gemini.md",sourceDirName:"advanced_tutorials",slug:"/advanced_tutorials/meet_gemini",permalink:"/docs/advanced_tutorials/meet_gemini",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced_tutorials/meet_gemini.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add Your Own Parallel Mode",permalink:"/docs/advanced_tutorials/add_your_parallel"},next:{title:"Parallelize Your Training like Megatron-LM via ColoTensor",permalink:"/docs/advanced_tutorials/parallelize_your_training_like_Megatron"}},l={},m=[{value:"Brief",id:"brief",level:2},{value:"Usage",id:"usage",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Design Details",id:"design-details",level:2},{value:"StatefulTensorMgr",id:"statefultensormgr",level:3},{value:"MemStatsCollector",id:"memstatscollector",level:3},{value:"Tensor Eviction Strategy",id:"tensor-eviction-strategy",level:3}],c={toc:m},p="wrapper";function d(e){let{components:t,...o}=e;return(0,n.kt)(p,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"meet-geminithe-heterogeneous-memory-manager-of-colossal-ai"},"Meet Gemini:The Heterogeneous Memory Manager of Colossal-AI"),(0,n.kt)("p",null,"Author: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/feifeibear"},"Jiarui Fang"),", Yang You"),(0,n.kt)("h2",{id:"brief"},"Brief"),(0,n.kt)("p",null,"When you only have a few GPUs for large model training tasks, ",(0,n.kt)("strong",{parentName:"p"},"heterogeneous training")," is the most effective approach. By accommodating model data in CPU and GPU and moving the data to the computing device when necessary, it can breakthrough the GPU memory wall by using GPU  and CPU memory (composed of CPU DRAM or nvme SSD memory) together at the same time. Moreover, the model scale can be further improved by combining heterogeneous training with the other parallel approaches, such as data parallel, tensor parallel and pipeline parallel . We now describe the design details of ",(0,n.kt)("strong",{parentName:"p"},"Gemini"),", the heterogeneous memory space manager of Colossal-AI. Its idea comes from ",(0,n.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2108.05818"},"PatrickStar"),", which has been adapted to Colossal-AI."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"At present, Gemini supports compatibility with ZeRO parallel mode, and it is really simple to use Gemini: Inject the features of ",(0,n.kt)("inlineCode",{parentName:"p"},"GeminiPlugin")," into training components with ",(0,n.kt)("inlineCode",{parentName:"p"},"booster"),". More instructions of ",(0,n.kt)("inlineCode",{parentName:"p"},"booster")," please refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/basics/booster_api"},(0,n.kt)("strong",{parentName:"a"},"usage of booster")),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from torchvision.models import resnet18\nfrom colossalai.booster import Booster\nfrom colossalai.zero import ColoInitContext\nfrom colossalai.booster.plugin import GeminiPlugin\nplugin = GeminiPlugin(placement_policy='cuda', strict_ddp_mode=True, max_norm=1.0, initial_scale=2**5)\nbooster = Booster(plugin=plugin)\nctx = ColoInitContext()\nwith ctx:\n    model = resnet18()\noptimizer = HybridAdam(model.parameters(), lr=1e-3)\ncriterion = lambda x: x.mean()\nmodel, optimizer, criterion, _, _ = booster.boost(model, optimizer, criterion)\n)\n")),(0,n.kt)("p",null,"Note that Gemini and parallel strategies such as tensor parallelism, data parallelism, pipeline parallelism and zero should be decoupled. However, Colossal-AI requires users to use Gemini with ZeRO. Although they are not necessarily coupled, we will improve it in the near future."),(0,n.kt)("h2",{id:"concepts"},"Concepts"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"OP"),"(",(0,n.kt)("strong",{parentName:"p"},"OP"),"erator)\uff1aoperation of a neural network layer, such as linear, LayerNorm, etc. The operator can be a forward propagation calculation or a back-propagation calculation."),(0,n.kt)("p",null,"Neural networks must manage two types of training data during training.\n",(0,n.kt)("strong",{parentName:"p"},"model data"),": consists of parameters, gradients and optimizer states, and its scale is related to the definition of model structure."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Non-model data"),": mainly composed of the intermediate tensor generated by the operator and the temporary variables of the operator. Non-model data changes dynamically according to the configuration of training tasks, such as batch size. Model data and non-model data compete with each other for GPU memory."),(0,n.kt)("h2",{id:"design-details"},"Design Details"),(0,n.kt)("p",null,"In some solutions, the ",(0,n.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2101.06840"},"Zero-offload")," adopted by DeepSpeed statically divides model data between CPU and GPU memory, and their memory layout is constant for different training configurations. As shown on the left of the figure below, when the GPU memory is insufficient to meet its corresponding model data requirements, the system will crash even if there is still available memory on the CPU at that time. While Colossal-AI can complete the training by moving part of the model data to the CPU."),(0,n.kt)("figure",{style:{textAlign:"center"}},(0,n.kt)("img",{src:"https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/tutorial/gemini/deepspeed_compare.png"}),(0,n.kt)("figcaption",null,"Comparison of the memory management of Zero-Offload and Gemini")),(0,n.kt)("p",null,"Colossal-AI designed Gemini, just like two-stars, which manages the memory space of CPU and GPU efficiently. It can make the tensor dynamically distributed in the storage space of CPU-GPU during training, so that the model training can break through the memory wall of GPU. The memory manager consists of two parts: ",(0,n.kt)("strong",{parentName:"p"},"MemStatsCollector (MSC)")," and ",(0,n.kt)("strong",{parentName:"p"},"StatefulTensorMgr (STM)"),"."),(0,n.kt)("p",null,"We take advantage of the iterative characteristics of the deep learning network training process. We divide iterations into two stages: warmup and non-warmup. One or several iterative steps at the beginning belong to the warmup stage, and the other iterative steps belong to the non-warmup stage. In the warmup stage, we collect information for the MSC, while in the non-warmup stage, STM gets the information collected by the MSC to move the tensor, so as to minimize the CPU-GPU data movement volume."),(0,n.kt)("figure",{style:{textAlign:"center"}},(0,n.kt)("img",{src:"https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/tutorial/gemini/gemini_workflow.png"}),(0,n.kt)("figcaption",null,"The workflow of Gemini during warmup and non-warmup phase")),(0,n.kt)("h3",{id:"statefultensormgr"},"StatefulTensorMgr"),(0,n.kt)("p",null,"STM manages the information of all model data tensors. In the process of model construction, Colossal-AI registers all model data tensors with STM. The memory manager marks each tensor with state information. The state set includes three types: HOLD, COMPUTE and FREE. The functions of STM are as follows:"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Query memory usage:"),"by traversing the locations of all tensors in heterogeneous space, obtain the memory occupation of CPU and GPU by model data."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Transition tensor state:")," it marks the tensor as COMPUTE state before each model data tensor participates in the operator calculation, and as HOLD state after calculation. The FREE state marked if the tensor is no longer in use."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Adjust tensor position:"),"tensor manager ensures that the tensor in COMPUTE state is placed on the computing device. If the storage space of the computing device is insufficient, it is necessary to move some tensors in HOLD state to other devices for storage. Tensor eviction strategy requires information from MSC, which will be introduced later."),(0,n.kt)("h3",{id:"memstatscollector"},"MemStatsCollector"),(0,n.kt)("p",null,"In the warmup stage, the memory information statistician monitors the memory usage of model data and non-model data in CPU and GPU for reference in the non-warmup stage. We can obtain the memory usage of model data at a certain time by querying STM. However, the memory usage of non-model data is difficult to obtain. Owing to the life cycle of non-model data not being managed by users, the existing deep learning framework does not expose the tracking interface of non-model data to users. MSC obtains the usage of CPU and GPU memory by non-model in the warmup stage through sampling. The specific methods are as follows:"),(0,n.kt)("p",null,"We trigger the memory sampling operation at the beginning and end of the operator. We call this time point ",(0,n.kt)("strong",{parentName:"p"},"sampling moment"),", and the time between the two sampling moments is called ",(0,n.kt)("strong",{parentName:"p"},"period"),". The calculation process is a black box. Due to the possible allocation of temporary buffer, the memory usage is very complex. However, we can accurately obtain the maximum memory usage of the system during the period. The use of non-model data can be obtained by the maximum memory use of the system between two statistical moments-model memory use."),(0,n.kt)("p",null,"How do we design the sampling time. Before we choose model data layout adjust of preOp. As shown in the figure below. We sample the system memory used of the previous period and the model data memory used of the next period. The parallel strategy will cause obstacles to the work of MSC. As shown in the figure, for example, for ZeRO or Tensor Parallel, because gathering model data is required before OP calculation, it will bring additional memory requirements. Therefore, we require to sample the system memory before the model data changes, so that the MSC will capture the model change memory of preOp within a period. For example, in period 2-3, we consider the memory changes brought by tensor gather and shard."),(0,n.kt)("p",null,"Although the sampling time can be placed in other locations, such as excluding the new information of the change of the gather buffer, it will cause trouble. There are differences in the implementation of Op in different parallel modes. For example, for Linear Op, gather buffer in Tensor Parallel is allocated in Op. For ZeRO, the allocation of gather buffer is in PreOp. Sampling at the beginning of PreOp helps to unify the two situations."),(0,n.kt)("figure",{style:{textAlign:"center"}},(0,n.kt)("img",{src:"https://raw.githubusercontent.com/hpcaitech/public_assets/main/colossalai/img/tutorial/gemini/gemini_mem_curve.png"}),(0,n.kt)("figcaption",null,"workflow")),(0,n.kt)("h3",{id:"tensor-eviction-strategy"},"Tensor Eviction Strategy"),(0,n.kt)("p",null,"The important duty of MSC is to adjust the tensor layout position. For example, at S2 in the figure above, we reduce the model data on the device, and meet the peak memory requirement calculated in period 2-3."),(0,n.kt)("p",null,"In the warmup stage, since we haven't finished a complete iteration yet, we don't know actual memory occupation. At this time, we limit the upper bound of memory usage of the model data. For example, only 30% of the GPU memory can be used. This ensures that we can successfully complete the warmup state."),(0,n.kt)("p",null,"In the non-warmup stage, we need to use the memory information of non-model data collected in the warm-up stage to reserve the peak memory required by the computing device for the next Period, which requires us to move some model tensors. In order to avoid frequent replacement of the same tensor in and out of the CPU-GPU, causing a phenomenon similar to ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Thrashing_(computer_science)"},"cache thrashing"),". Using the iterative characteristics of DNN training, we design the OPT cache swap out strategy. Specifically, in the warmup stage, we record the sampling time required by each tensor computing device. If we need to expel some HOLD tensors, we will choose the latest tensor needed on this device as the victim."))}d.isMDXComponent=!0}}]);